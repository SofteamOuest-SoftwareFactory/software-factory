- name: Create scripts folder
  file:
    path: ~/scripts
    state: directory
  become: yes
  become_user: root

- name: "Create Restore Script"
  template:
    src: restore.j2
    dest: /root/scripts/restore.sh
  become: yes
  become_user: root

- name: "Status file /mnt/backup/pki"
  stat:
    path:  "/mnt/backup/pki"
  register: pki_status
  become: yes
  become_user: root

- name: Remove folder /var/lib/etcd
  file:
    path: /etc/kubernetes/pki
    state: absent

- name: Copy /mnt/backup/pki to /etc/kubernetes
  synchronize:
    src: /mnt/backup/pki/
    dest: /etc/kubernetes/
  delegate_to: "{{ inventory_hostname }}"
  become: yes
  become_user: root
  when: pki_status.stat.exists

- name: Delete .kube folder
  file:
    path: ~/.kube
    state: absent
  become: yes
  become_user: root

- name: Create .kube folder
  file:
    path: ~/.kube
    state: directory
  become: yes
  become_user: root

- name: Create kubadm-config
  template:
    src: kubeadm-config.j2
    dest: /tmp/kubeadm-config.yaml
  become: yes
  become_user: root

- name: Execute kubeadm init (reuse old /etc/kubernetes/pki)
  command: kubeadm init {{ kubeadm.init.options | default('') }} --config=/tmp/kubeadm-config.yaml --ignore-preflight-errors=DirAvailable--etc-kubernetes-pki
  register: kubeadm_init_message_exists
  become: yes
  become_user: root
  when: pki_status.stat.exists

- name: "Create join master fact"
  set_fact:
    join_master: "{{ kubeadm_init_message_exists.stdout_lines[-1] }}"
  become: yes
  become_user: root
  when: pki_status.stat.exists

- name: Execute kubeadm init
  command: kubeadm init {{ kubeadm.init.options | default('') }} --config=/tmp/kubeadm-config.yaml
  register: kubeadm_init_message_not_exists
  become: yes
  become_user: root
  when: not pki_status.stat.exists

- name: "Create join master fact"
  set_fact:
    join_master: "{{ kubeadm_init_message_not_exists.stdout_lines[-1] }}"
  become: yes
  become_user: root
  when: not pki_status.stat.exists

- name: Copy admin.conf
  copy:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    remote_src: true
  become: yes
  become_user: root

- name: Get K8s version
  shell: kubectl version | base64 | tr -d '\n'
  register: k8_version
  become: yes
  become_user: root

- name: Create K8s network
  command: kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version={{ k8_version.stdout_lines[0] }}
  become: yes
  become_user: root
